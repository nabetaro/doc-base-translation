#!/usr/bin/perl
# vim:cindent:ts=2:sw=2:et:fdm=marker:cms=\ #\ %s
#
# $Id: install-docs 65 2007-05-02 12:03:51Z robert $

use warnings;
use strict;
use lib 'perl';


# declared in Debian::DocBase::InstallDocs;
use vars qw($fully_functional $verbose $debug $exit_val $MODE_INSTALL $MODE_REMOVE $MODE_REREGISTER $MODE_STATUS);

BEGIN {
  $fully_functional = eval {
                              require Pod::Usage;
                              import Pod::Usage qw(pod2usage);
                              require Debian::DocBase::Common;
                              import Debian::DocBase::Common;
                              require Debian::DocBase::InstallDocs;
                              import Debian::DocBase::InstallDocs;
                              1;
                        }; 
  warn $@ if $@;
}

=head1 NAME

install-docs - manage online Debian documentation

=cut



# set umask explicitly
umask 022;

# constants
my $docbasedir="/usr/share/doc-base";
my $do_dwww_update = 1;
my $force_reregister_flagfile = "/var/lib/doc-base/info/FORCE-REREGISTER.flag";

=head1 SYNOPSIS

 install-docs [options] -i | --install file [ file ... ]

 install-docs [options] -r | --remove file [ file ... ]

 install-docs [options] -R | --register-all

 install-docs [options] -s | --status docid [ docid ... ]
 
 install-docs -h | --help


=head1 DESCRIPTION

B<install-docs> is a tool allow Debian package maintainers to register
documentation to various documentation systems.  It currently supports
B<dhelp>,  B<dwww>, B<doc-central>, and B<scrollkeeper> browsers.

This manual page provides a quick synopsis of B<install-docs> usage.
Full documentation can be found in the documentation, including a
description of the control file syntax and grammar.

=head1 OPTIONS

=over 4

=cut

#### Parse arguments loop #####
#
exit(1) if not $fully_functional and $#ARGV < 0;
pod2usage(-verbose => 0, -exitval => 1) if $#ARGV < 0 ;
while (my $arg = shift @ARGV) {

  # try to handle concatenation of options e.g. `-vdi' instead of `-v -d -i'
  if ($arg =~ /^(-\w)(\w+)$/) {
    $arg = $1;
    unshift(@ARGV, "-".$2)
  }      

  if (($arg eq '-v') or ($arg eq '--verbose')) { # {{{ 

=item B<-v> | B<--verbose>

Operate verbosely.

=cut
    $verbose = 1;
    next;  # }}}

   } elsif (($arg eq '-d') or ($arg eq '--debug')) { # {{{ 

=item B<-d> | B<--debug>

Print some debugging informations.

=cut
    $debug = 1;
    next;  # }}}
  
   } elsif ($arg eq '--no-update-menus') { # {{{

=item B<--no-update-menus>

Inhibit running both L<update-menus(1)> (used for the L<dwww(8)> update program)
and L<scrollkeeper-update(8)>.

=cut
    $do_dwww_update = 0;
    next; # }}}

   } elsif (($arg eq '-h') or ($arg eq '--help')) { # {{{ 

=item B<-h> | B<--help>

Show a short help message.


=cut
    pod2usage(-verbose => 1, -exitval => 0);
    # NOT REACHED  # }}}

=back

=head1 ACTIONS

=over 4

=cut

   } elsif (($arg eq '-i') or ($arg eq '--install')) { # {{{

=item B<-i> | B<--install> I<file> [ I<file ...> ]

Install the documentation described by the control file I<file>.

=cut
    # install new docs 
    ($#ARGV == -1) and die "Arguments missing for `install'";
    &CheckFunctionality();
    if (! -e $force_reregister_flagfile) {
        &SetMode($MODE_INSTALL, @ARGV);
    } else {     
        &SetMode($MODE_REREGISTER); 
    }      
    last; # }}}

  } elsif (($arg eq '-r') or ($arg eq '--remove')) { # {{{

=item B<-r> | B<--remove> I<file> [ I<file ...> ]

Remove the documentation identified by the control file
I<file>.  

=cut
    # remove old docs # 
    ($#ARGV == -1) and die "Arguments missing for `remove'";
    &CheckFunctionality();
    &SetMode($MODE_REMOVE, @ARGV);
    last; # }}}

  } elsif (($arg eq '-R') or ($arg eq '--register-all')) { # {{{ 

=item B<-R> | B<--register-all>

Display the status of the document identifier I<docid>.
Document identifiers are tags which are set in the control
file, and usually correspond to the package name.

=cut
    ($#ARGV == -1) or die "Too many arguments missing for `register-all'";
    &CheckFunctionality();
    &SetMode($MODE_REREGISTER);
    last; # }}}

  } elsif (($arg eq '-s') or ($arg eq '--status')) {  # {{{

=item B<-s> | B<--status> I<docid> [ I<docid ...> ]

Display the status of the document identifier I<docid>.
Document identifiers are tags which are set in the control
file, and usually correspond to the package name.

=cut
    ($#ARGV == -1) and die "Arguments missing for `status'";
    &SetMode($MODE_STATUS, @ARGV);
    last; # }}}

  } elsif (($arg eq '-L') or ($arg eq '--listfiles')) { # {{{

=item B<-L> | B<--listfiles> I<docid> [ I<docid ...> ]

Deprecated option. Does nothing.

=back

=cut
    warn "Ignoring deprecated command line argument: $arg\n";
    exit 0;
 # }}}

  } else { # {{{ default: die
    pod2usage(-msg => "Invalid argument: $arg", -verbose => 0, -exitval => 1);
  } # }}}

}


sub CheckFunctionality() { # {{{
  if (not $fully_functional) {
    open F, "> $force_reregister_flagfile" 
      or die "Cannot create $force_reregister_flagfile: $!\n";
    print F "x";
    close F;
    exit 0;
  }    
} # }}}


#### Main function
&InstallDocsMain($do_dwww_update);

unlink ($force_reregister_flagfile) if -e $force_reregister_flagfile;

exit ($exitval);

__DATA__

=head1 BUGS

See <URL:http://bugs.debian.org/doc-base>.

=head1 SEE ALSO

dwww(8), scrollkeeper(7), Debian doc-base Manual
F</usr/share/doc/doc-base/doc-base.html/index.html>, dhelp Manual
F</usr/share/doc/dhelp/dhelp.html>

=head1 AUTHOR

This program was originally written by Christian Schwarz
<schwarz@debian.org>, for the Debian GNU/Linux system, and the
next maintainer was Adam Di Carlo <aph@debian.org>.
Robert Luberda <robert@debian.org> is currently maintaining and extending it.

This software was meant to be for the benefit of the entire Debian
user and developer community.  If you are interested in being involved
with this software, please join the mailing list
<debian-doc@lists.debian.org>.

=cut






